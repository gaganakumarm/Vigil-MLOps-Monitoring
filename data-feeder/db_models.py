import os
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, func, Text
from sqlalchemy.orm import declarative_base, sessionmaker

# --- Configuration ---
# Get DB credentials from standardized DB_* environment variables
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "mlops_password")
DB_NAME = os.getenv("DB_NAME", "vigil_db")
DB_HOST = os.getenv("DB_HOST", "db")  # 'db' is the service name in docker-compose
DB_PORT = os.getenv("DB_PORT", "5432")

# PostgreSQL connection URL
SQLALCHEMY_DATABASE_URL = (
    f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
)

# SQLAlchemy setup
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# --- Data Models ---

class PredictionLog(Base):
    """
    Table to log every production prediction made by the model API.
    This raw data is used by the monitoring job (Task 2.4) to run Evidently reports.
    """
    __tablename__ = "prediction_logs"

    id = Column(Integer, primary_key=True, index=True)
    
    # Input features (simplified example)
    feature_1 = Column(Float, nullable=False)
    feature_2 = Column(Float, nullable=False)
    
    # Model output
    prediction = Column(Integer, nullable=False)
    
    # Actual observed outcome (ground truth) - will often be Null initially
    target = Column(Integer, nullable=True) 
    
    # Metadata
    prediction_time = Column(DateTime, default=func.now())
    model_version = Column(String(50), default="v1.0")

class MonitoringMetric(Base):
    """
    Table to store the summary metrics and drift scores generated by the 
    Evidently monitoring job (Task 2.4).
    """
    __tablename__ = "monitoring_metrics"

    id = Column(Integer, primary_key=True, index=True)
    
    # The time the batch job ran
    timestamp = Column(DateTime, default=func.now())
    
    # Metrics from the Evidently Data Drift Report (simplified)
    data_drift_score = Column(Float, nullable=False) # e.g., a custom combined drift score
    num_drifted_features = Column(Integer, nullable=False)
    
    # Metrics from the Evidently Regression/Classification Performance Report
    metric_name = Column(String(100), nullable=False) # e.g., 'f1_score', 'rmse'
    metric_value = Column(Float, nullable=False)
    
    # Store a summary of the full JSON report for dashboard display
    report_summary = Column(Text, nullable=True) 
    model_version = Column(String(50), nullable=False)
    
    # Batch identifier
    batch_start_time = Column(DateTime, nullable=False)
    batch_end_time = Column(DateTime, nullable=False)

def get_db():
    """Dependency function to get a database session."""
    db = SessionLocal()
    try:
        return db
    finally:
        db.close()

if __name__ == '__main__':
    # This block is for testing connectivity or manual setup outside the main script
    print(f"Database URL: {SQLALCHEMY_DATABASE_URL}")
    print("Base models defined.")
